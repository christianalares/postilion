generator client {
  provider        = "prisma-client-js"
  output          = "./../generated/client"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TEAM_ROLE_ENUM {
  OWNER
  MEMBER
}

enum MESSAGE_STATUS_ENUM {
  PENDING
  COMPLETED
  FAILED
}

enum WEBHOOK_REQUEST_METHOD_ENUM {
  GET
  POST
  PUT
  DELETE
}

enum WEBHOOK_LOG_STATUS_ENUM {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  teams         UserOnTeam[]
  team_invites  TeamInvite[]
  projects      Project[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Team {
  id              String       @id @default(ulid())
  slug            String       @unique
  created_at      DateTime     @default(now())
  updated_at      DateTime?
  name            String
  image_url       String?
  members         UserOnTeam[]
  invites         TeamInvite[]
  projects        Project[]
  domains         Domain[]
  end_free_trial  DateTime?
  subscription_id String?

  @@index([slug])
  @@map("teams")
}

model UserOnTeam {
  user_id    String
  team_id    String
  created_at DateTime       @default(now())
  updated_at DateTime?
  role       TEAM_ROLE_ENUM
  team       Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, team_id])
  @@unique([user_id, team_id])
  @@index([team_id, user_id])
  @@map("users_on_teams")
}

model TeamInvite {
  id                 String         @id @default(ulid())
  created_at         DateTime       @default(now())
  email              String
  role               TEAM_ROLE_ENUM
  team_id            String
  team               Team           @relation(fields: [team_id], references: [id])
  created_by_user_id String
  created_by         User           @relation(fields: [created_by_user_id], references: [id])
  code               String         @unique

  @@unique([email, team_id])
  @@index([team_id, code])
  @@map("team_invites")
}

model Project {
  id                 String    @id @default(ulid())
  short_id           String    @unique
  created_at         DateTime  @default(now())
  updated_at         DateTime? @updatedAt
  name               String
  slug               String
  team_id            String
  team               Team      @relation(fields: [team_id], references: [id])
  created_by_user_id String
  created_by         User      @relation(fields: [created_by_user_id], references: [id])
  messages           Message[]
  domain             Domain?
  webhooks           Webhook[]

  @@unique([team_id, slug])
  @@index([short_id, team_id, slug])
  @@map("projects")
}

model Message {
  id                   String              @id @default(ulid())
  slug                 String              @unique
  created_at           DateTime            @default(now())
  updated_at           DateTime?           @updatedAt
  subject              String
  from                 String
  body_raw             String
  body_text            String?
  body_stripped        String?
  body_ai_summary      String?
  metadata             Json?
  status               MESSAGE_STATUS_ENUM
  project_id           String
  project              Project             @relation(fields: [project_id], references: [id])
  handle               String?
  attachments          Attachment[]
  webhook_logs         WebhookLog[]
  total_webhooks_count Int                 @default(0)

  @@index([project_id, slug])
  @@map("messages")
}

model Attachment {
  id         String   @id @default(ulid())
  created_at DateTime @default(now())
  message_id String
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)
  filename   String
  mime_type  String
  r2_key     String   @unique

  @@index([message_id, r2_key])
  @@map("attachments")
}

model Domain {
  id              String    @id @default(ulid())
  forwardemail_id String
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  domain          String    @unique
  team_id         String
  team            Team      @relation(fields: [team_id], references: [id])
  project_id      String?   @unique
  project         Project?  @relation(fields: [project_id], references: [id])

  @@index([team_id, domain])
  @@map("domains")
}

model Webhook {
  id          String                      @id @default(ulid())
  created_at  DateTime                    @default(now())
  updated_at  DateTime?                   @updatedAt
  url         String
  method      WEBHOOK_REQUEST_METHOD_ENUM
  signing_key String
  project_id  String
  project     Project                     @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model WebhookLog {
  id         String                      @id @default(ulid())
  created_at DateTime                    @default(now())
  updated_at DateTime?                   @updatedAt
  message_id String
  message    Message                     @relation(fields: [message_id], references: [id], onDelete: Cascade)
  status     WEBHOOK_LOG_STATUS_ENUM
  url        String
  method     WEBHOOK_REQUEST_METHOD_ENUM
  error      String?
  attempts   Int                         @default(1)
  webhook_id String

  @@unique([message_id, webhook_id])
  @@index([message_id])
  @@map("webhook_logs")
}
