// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TEAM_ROLE_ENUM {
  OWNER
  MEMBER
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  teams         UserOnTeam[]
  team_invites  TeamInvite[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Team {
  id         String       @id @default(ulid())
  slug       String       @unique
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime?    @db.Timestamptz(6)
  name       String
  image_url  String?
  members    UserOnTeam[]
  invites    TeamInvite[]

  @@index([slug])
  @@map("teams")
}

model UserOnTeam {
  user_id    String
  team_id    String
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  updated_at DateTime?      @db.Timestamptz(6)
  role       TEAM_ROLE_ENUM
  team       Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, team_id])
  @@unique([user_id, team_id])
  @@index([team_id, user_id])
  @@map("users_on_teams")
}

model TeamInvite {
  id                 String   @id @default(ulid())
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  email              String
  team_id            String
  team               Team     @relation(fields: [team_id], references: [id])
  created_by_user_id String
  created_by         User     @relation(fields: [created_by_user_id], references: [id])
  code               String   @unique

  @@unique([email, team_id])
  @@index([team_id, created_by_user_id])
  @@map("team_invites")
}
